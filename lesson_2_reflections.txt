What happens when you initialize a repository? Why do you need to do it?

	Git creates a directory called .git in the working directory which saves all
	the needed metadata. We need to do this to track changes to the files in the
	working directory.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	The staging area acts as a middle ground between the working directory and
	the repository. It contains files from the working directory that are ready
	to be committed. Using the staging area, you can add which files you would
	like to track changes for, as opposed to just tracking every file in the
	working directory. Additionally, you can choose which files to add in a
	single initial commit, and therefore have files bundled in logical commits.

How can you use the staging area to make sure you have one commit per logical
change?

	By using the command git diff, you can view the differences between the
	files in the working directory and in the staging area. By using the command
	git diff --staged, you can view the differences between the files in the
	staging area and in the latest commit. Using these two commands, you can
	check all the changes to be committed, and verify that you have one commit
	per logical change.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when trying out experimental features or creating
	multiple versions of code that you would want to save concurrently. Branches
	would enable that by having multiple version histories saved separate from
	one another, which means that you could check a version history for each of
	the saved branches separately.

How do the diagrams help you visualize the branch structure?

	They give a visual representation of which commits belong to which branch.
	This is helpful to quickly see where the different branches split and view
	the relationships between the branches.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
